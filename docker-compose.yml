version: "3.4"

services:
  server-test:
    container_name: monster-rpg-server-test
    build:
      context: ./server
      dockerfile: ../Dockerfile.server
      target: test
    volumes:
      - ./server:/app
    networks:
      - monster-rpg-networks
    environment:
      NODE_ENV: development

  server-dev:
    container_name: monster-rpg-server-dev
    build:
      context: ./server
      dockerfile: ../Dockerfile.server
      target: development
    ports:
      - 5000:5000
    volumes:
      - ./server:/app
    networks:
      - monster-rpg-networks
    environment:
      NODE_ENV: development

  client-test:
    container_name: monster-rpg-client-test
    build:
      context: ./client
      dockerfile: ../Dockerfile.client
      target: test

  client-dev:
    container_name: monster-rpg-client-dev
    build:
      context: ./client
      dockerfile: ../Dockerfile.client
      target: development
    volumes:
      - ./client:/app
    ports:
      - 3000:3000

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: monsters-rpg
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

networks:
  monster-rpg-networks:
    driver: bridge
